基于BP神经网络实现一个手写字符识别系统，系统会在服务器启动时自动读入训练好的神经网络文件，如果文件不存在，则读入数据集开始训练，用户可以通过在html页面上手写数字发送给服务器来得到识别结果。


人工智能

图灵对于人工智能的定义大家都已耳熟能详，但"是什么构成了智能"至今仍是一个带有争论的话题。计算机科学家们目前将人工智能分成了多个分支，每一个分支都专注于解决一个特定的问题领域，举其中三个有代表性的分支：

基于预定义知识的逻辑与概率推理，比如模糊推理能够帮助一个恒温器根据监测到的温度和湿度决定什么时候开关空调。
启发式搜索，比如在棋类游戏中搜索到走下一子的最优解。
机器学习，比如手写字符识别系统。
简单来说，机器学习的目的就是通过大量数据训练一个能够识别一种或多种模式的系统。训练系统用的数据集合被称作训练集，如果训练集的每个数据条目都打上目标输出值（也就是标签），则该方法称作监督学习，不打标签的则是非监督学习。机器学习中有多种算法能够实现手写字符识别系统，在本课程中我们将基于神经网络实现该系统。



什么是神经网络

神经网络由能够互相通信的节点构成，赫布理论解释了人体的神经网络是如何通过改变自身的结构和神经连接的强度来记忆某种模式的。而人工智能中的神经网络与此类似。请看下图，最左一列蓝色节点是输入节点，最右列节点是输出节点，中间节点是隐藏节点。该图结构是分层的，隐藏的部分有时候也会分为多个隐藏层。如果使用的层数非常多就会变成我们平常说的深度学习了。
见图 神经网络.png


每一层（除了输入层）的节点由前一层的节点加权值相加 再加上 偏置向量并经过激活函数得到，公式如下：

见图节点计算.jpg

其中f是激活函数，b是偏置向量，它们的作用会在之后说明。

这一类拓扑结构的神经网络称作前馈神经网络，因为该结构中不存在回路。有输出反馈给输入的神经网络称作递归神经网络（RNN）。在本课程中我们使用前馈神经网络中经典的BP神经网络来实现手写识别系统。
如何使用神经网络

很简单，神经网络属于监督学习，那么多半就三件事，决定模型参数，通过数据集训练学习，训练好后就能到分类工具/识别系统用了。数据集可以分为2部分（训练集，验证集），也可以分为3部分（训练集，验证集，测试集），训练集可以看作平时做的习题集（可反复做），系统通过对比习题集的正确答案和自己的解答来不断学习改良自己。测试集可以看作是高考，同一份试卷只能考一次，测试集一般不会透露答案。那么验证集是什么呢？好比多个学生（类比用不同策略训练出的多个神经网络）要参加一个名额只有两三人的比赛，那么就得给他们一套他们没做过的卷子（验证集）来逐出成绩最好的几个人，有时也使用验证集决定模型参数。在本课程中数据集只划分训练集和验证集。

用户接口(ocr.html)是一个html页面，用户在canvas上写数字，之后点击选择训练或是预测。客户端(ocr.js)将收集到的手写数字组合成一个数组发送给服务器端(server.py)处理，服务器调用神经网络模块(ocr.py)，它会在初始化时通过已有的数据集训练一个神经网络，神经网络的信息会被保存在文件中，等之后再一次启动时使用。最后，神经网络设计脚本(neural_network_design.py)是用来测试不同隐藏节点数下的性能，决定隐藏节点数用的。